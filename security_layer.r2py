"""
This security layer adequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a' #backup file - you want to save it every time you do a valid write in .b
    self.Bfn = filename+'.b' #file to which you write - attack program interacts with

    # make the files and add 'SE' to the readat file...
    # log("successfully reached create file, line 29")
    try:
      # log("successfully reached try block in create, line 31")
      self.Afile = openfile(self.Afn,create) #is an file object made of textfile.txt.a
      self.Bfile = openfile(self.Bfn,create)
      #log("line 33 Valid Data (shorter) write to a file is unsuccessful!\r\n")
    except (RepyArgumentError, FileInUseError, ResourceExhaustedError, FileNotFoundError):
      pass
    if create:
      self.Afile.writeat('SE',0)


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset) #writing without checking, as per Must 1.4
  
  def readat(self,bytes,offset): #put in try except block to test for invalid read

    try:
      self.Afile.readat(bytes,offset)
    except:
      pass
      # do nothing (but log that youre successfully catching an exception)

    # log("everythings cool")
 

    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self): 
    try:
      Bcontents = self.Bfile.readat()
      log(Bcontents)
    except (IndentationError, RepyArgumentError, SeekPastEndOfFileError, FileClosedError):
      exitall()
    except:
      log("unexpected exception: ")
      raise

    if Bcontents[0] == 'S' and Bcontents[-1] == 'E':
      try:
      # self.Afile = openfile(self.Afn, 1)
        self.Afile.writeat(Bcontents, 0)
      except RepyArgumentError:
        pass
    try:
      self.Afile.close()
      self.Bfile.close()
    except (RepyArgumentError, FileClosedError):
      pass

#line 11 in attackcase2 calls this (for example)
def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

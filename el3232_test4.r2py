# Attack Case 4
# el3232

# works against 
# reference_monitor_lra274.r2py, 
# reference_monitor_bd1599.r2py, 
# reference_monitor_sp4232.r2py, 
# reference_monitor_taz231.r2py
# reference_monitor_zm2117.r2py

# ➜  ISP git:(master) ✗ python repy.py restrictions.default encasementlib.r2py reference_monitor_lra274.r2py test3_el3232.r2py


# This attack attempts to write a long valid message followed by a shorter valid message, 
# and exploits any reference monitor that allows the file to be reopened and written to with 
# an invalid message as long as it completes a valid message, whereas a shorter valid write would overwrite the entire file


# Clean up of existing file
if "testfile.txt.a" in listfiles():
    removefile("testfile.txt.a")
if "testfile.txt.b" in listfiles():
    removefile("testfile.txt.b")

# Open File Function Call


try:
    myfile=ABopenfile("testfile.txt",True)  #Create an AB file
    myfile2 = ABopenfile("testfile2.txt",True)

    # Empty/New File should have contents 'SE' satisfying the requirement

    # Writing valid contents
    myfile.writeat("SSSEEE",0)
    myfile.close()

    myfile = ABopenfile("testfile.txt", True)
    contents = myfile.readat(None, 0)
    # log(contents)

    myfile.writeat("W", 1)
    # myfile.close()


    # Reopening the same file and writing other valid contents
    # myfile = ABopenfile("testfile.txt", False)
    
    # # Read and log current contents before trying to write
    # contents = myfile.readat(15,0)
    # log(contents)

    # myfile.writeat("1234567891011E",2)
    # myfile.close()

    # myfile = ABopenfile("testfile.txt",False)
    # myfile.writeat("SvalidE",0)  
    # myfile.close()

    # myfile = ABopenfile("testfile.txt",False)

except:
    # Error Handle or Failure Condition
    log("file is not written with valid data properly!")

finally:
    myfile.close()